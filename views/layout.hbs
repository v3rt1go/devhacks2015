<!DOCTYPE html>
<html>
  <head>
    <title>{{title}}</title>
    <link rel='stylesheet' href='/javascripts/bootstrap/dist/css/bootstrap.min.css'>
    <link rel='stylesheet' href='/stylesheets/style.css' />

    <script type="text/javascript">
// Setup the different icons and shadows
var iconURLPrefix = 'http://maps.google.com/mapfiles/ms/icons/';
var icons = [
  iconURLPrefix + 'red-dot.png',
  iconURLPrefix + 'green-dot.png'
]
var iconsLength = icons.length;
var markers = [];
var timer;

var map,geocoder;
var GPSClientArray=new Array();
var index=0;

function initMap() {
	var directionsService = new google.maps.DirectionsService;
	var directionsDisplay = new google.maps.DirectionsRenderer;
	var latLong = {
		lat: 44.44589077681009,
		lng: 26.11595373068849
	};
	var map = new google.maps.Map(document.getElementById('map'), {
		zoom: 13,
		center: latLong
	});
	directionsDisplay.setMap(map);

	getData(map);

	var onChangeHandler = function() {
		calculateAndDisplayRoute(directionsService, directionsDisplay);
		getPanicData(map, 44.42441749824699, 26.11023328134604);
	};
	document.getElementById('simulate').addEventListener('click', onChangeHandler);

	geocoder = new google.maps.Geocoder();
}

function calculateAndDisplayRoute(directionsService, directionsDisplay) {
  directionsService.route({
    origin: document.getElementById('start').value,
    destination: document.getElementById('end').value,
    optimizeWaypoints: true,
    travelMode: google.maps.TravelMode.DRIVING
  }, function(response, status) {
    if (status === google.maps.DirectionsStatus.OK) {
      directionsDisplay.setDirections(response);
      var route = response.routes[0];
      var summaryPanel = document.getElementById('directions-panel');
      summaryPanel.innerHTML = '';
      // For each route, display summary information.
      for (var i = 0; i < route.legs.length; i++) {
        var routeSegment = i + 1;
        summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
            '</b><br>';
        summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
        summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
      }
    } else {
      window.alert('Directions request failed due to ' + status);
    }
  });

  dummyStart(document.getElementById('start').value, document.getElementById('end').value);
}

function clearMarkers() {
	if (markers.length > 0) {
		// Loop through markers and set map to null for each
		for (var markerId in markers) {
			var marker = markers[markerId];
			marker.setMap(null);
		}
		markers = [];
	}
}

function setMarkers(json, map) {
	for (var groupId in json) {
		var group = json[groupId];
		for (var lightId in group) {
			var state = group[lightId]["state"];
			var lat = parseFloat(group[lightId]["lat"]);
			var lng = parseFloat(group[lightId]["long"]);
			if (state == "red") {
				state = 0;
			} else if (state == "green") {
				state = 1;
			}
			var marker = new google.maps.Marker({
				position: new google.maps.LatLng(lat, lng),
				map: map,
				icon: icons[state]
			});
			markers.push(marker);
		}
	}
}

function getData(map) {
	$.ajax({
	  url: "http://192.168.2.195:3000/api/devices",
	}).done(function (json) {
		clearMarkers();
		setMarkers(json, map);
		window.clearTimeout(timer);
		timer = setTimeout(function () {
			getData(map);
		}, 5000);
	});
}

function getPanicData(map, lat, lng) {
	$.ajax({
	  url: "http://192.168.2.195:3000/api/panic?device=123&coords=" + lat + "," + lng,
	}).done(function (json) {
		$('#details').html(JSON.stringify(json["accidentDetails"]));
	});
}


/* Animation */
function getPath(obj)
{
obj.xmlHttp.onreadystatechange=function() {
if(obj.xmlHttp.readyState==4)
{
obj.jsonObject= eval('(' + obj.xmlHttp.responseText + ')');
obj.ready=1;
}
};
obj.xmlHttp.open("GET",'mock_route.json',true);
obj.xmlHttp.send(null);
}
function GetXmlHttpObject(obj)
{
try
  {
  obj.xmlHttp=new XMLHttpRequest();
  }
catch (e)
  {
  try
    {
    obj.xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");
    }
  catch (e)
    {
    obj.xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
    }
  }
}

function startRender()
{
for(var i=0;i<=index;i++)
{
if(GPSClientArray[i].ready==1)
{
decode(GPSClientArray[i]);
}
}
}

function decode(obj) {
if(obj.count==0)
{
var instring=obj.jsonObject.routes[0].legs[0].steps[obj.nopath].polyline.points;
if(instring==null || instring=="")
{
obj.ready=0;
}
instring = instring.replace(/\\\\/g, "\\");  
obj.points = decodeLine(instring);
instring="";
} 
if(obj.count<obj.points.length-1)
{
obj.marker.setMap(null);
var coord = [
new google.maps.LatLng(obj.points[obj.count][0],obj.points[obj.count][1]),
new google.maps.LatLng(obj.points[obj.count+1][0],obj.points[obj.count+1][1]),
];
var path = new google.maps.Polyline({
      path: coord,
      strokeColor: obj.color,
      strokeOpacity: 1,
      strokeWeight: 3
    });
   path.setMap(map);
obj.marker = new google.maps.Marker({
        position: coord[1],
        map: map,
        title: obj.name
    });
    google.maps.event.addListener(obj.marker, 'dblclick', function() {
      alert(obj.info());
    });
  obj.count++;
}
else
{
obj.nopath++;
obj.count=0;
}
}

function decodeLine(encoded) {
  var len = encoded.length;
  var index = 0;
  var array = [];
  var lat = 0;
  var lng = 0;

  while (index < len) {
    var b;
    var shift = 0;
    var result = 0;
    do {
      b = encoded.charCodeAt(index++) - 63;
      result |= (b & 0x1f) << shift;
      shift += 5;
    } while (b >= 0x20);
    var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
    lat += dlat;

    shift = 0;
    result = 0;
    do {
      b = encoded.charCodeAt(index++) - 63;
      result |= (b & 0x1f) << shift;
      shift += 5;
    } while (b >= 0x20);
    var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
    lng += dlng;

    array.push([lat * 1e-5, lng * 1e-5]);
  }

  return array;
}

function GPSClient(name,color,origin,destination,waypoints)
{
this.name=name;
this.color=color;
this.origin=origin;
this.destination=destination;
this.waypoints=waypoints;
this.i=0;
this.jsonObject;
this.xmlHttp;
this.points;
this.count=0;
this.nopath=0;
this.ready=0;
this.marker= new google.maps.Marker();
this.info=function()
{
return "Name: "+this.name+"\nOrigin: "+this.origin+"\nDestination: "+this.destination+"\nWaypoints: "+waypoints;
}
}

function GPSClientInit(obj)
{
GetXmlHttpObject(obj);
getPath(obj);
}

function addGPSClient(origin, destination)
{
/*This client is dummy as mock_path.json is a hard coded path. This is because AJAX cannot reference
the URL http://maps.googleapis.com/maps/api/directions/json?origin=Strada%20Mihai%20Eminescu%20226,%20Bucure%C8%99ti,%20Romania&destination=Splaiul%20Unirii%206,%20Bucure%C8%99ti,%20Romania&sensor=false
directly, you need a programming language like PHP, Java to proxy the result for you so that you can access
the data in your own domain like localhost/proxy?params
*/
GPSClientArray[index]=new GPSClient('DevHacks15','#FF0000',origin,destination);console.log(GPSClientArray[index]);
GPSClientInit(GPSClientArray[index]);
}

function dummyStart(origin, destination)
{
addGPSClient(origin, destination);
self.setInterval("startRender()",500);
}
    </script>
  </head>
  <body>
    {{{body}}}

    <script src="/javascripts/falcor/dist/falcor.browser.js"></script>
    <script src="/javascripts/bundle.js"></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDluLpbNcXXI5rbKwHAEfy53ZjJOs0B-HU&sensor=false&callback=initMap" async defer></script>
  </body>
</html>
