<!DOCTYPE html>
<html>
  <head>
    <title>{{title}}</title>
    <link rel='stylesheet' href='/javascripts/bootstrap/dist/css/bootstrap.min.css'>
    <link rel='stylesheet' href='/stylesheets/style.css' />

    <script type="text/javascript">
// Setup the different icons and shadows
var iconURLPrefix = 'http://maps.google.com/mapfiles/ms/icons/';
var icons = [
  iconURLPrefix + 'red-dot.png',
  iconURLPrefix + 'green-dot.png'
]
var iconsLength = icons.length;
var markers = [];
var timer;

function initMap() {
	var directionsService = new google.maps.DirectionsService;
	var directionsDisplay = new google.maps.DirectionsRenderer;
	var latLong = {
		lat: 44.44589077681009,
		lng: 26.11595373068849
	};
	var map = new google.maps.Map(document.getElementById('map'), {
		zoom: 13,
		center: latLong
	});
	directionsDisplay.setMap(map);

	getData(map);

	var onChangeHandler = function() {
		calculateAndDisplayRoute(directionsService, directionsDisplay);
		getPanicData(map, 44.42441749824699, 26.11023328134604);
	};
	document.getElementById('simulate').addEventListener('click', onChangeHandler);
}

function calculateAndDisplayRoute(directionsService, directionsDisplay) {
  directionsService.route({
    origin: document.getElementById('start').value,
    destination: document.getElementById('end').value,
    optimizeWaypoints: true,
    travelMode: google.maps.TravelMode.DRIVING
  }, function(response, status) {
    if (status === google.maps.DirectionsStatus.OK) {
      directionsDisplay.setDirections(response);
      var route = response.routes[0];
      var summaryPanel = document.getElementById('directions-panel');
      summaryPanel.innerHTML = '';
      // For each route, display summary information.
      for (var i = 0; i < route.legs.length; i++) {
        var routeSegment = i + 1;
        summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
            '</b><br>';
        summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
        summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
      }
    } else {
      window.alert('Directions request failed due to ' + status);
    }
  });
}

function animate(start_location, end_location) {
	var departure = new google.maps.LatLng(start_location.lat, start_location.lng); //Set to whatever lat/lng you need for your departure location
	var arrival = new google.maps.LatLng(end_location.lat, end_location.lng); //Set to whatever lat/lng you need for your arrival location
	var line = new google.maps.Polyline({
	  path: [departure, departure],
	  strokeColor: "#FF0000",
	  strokeOpacity: 1,
	  strokeWeight: 1,
	  geodesic: false, //set to false if you want straight line instead of arc
	  map: map,
	});
	var step = 0;
	var numSteps = 250; //Change this to set animation resolution
	var timePerStep = 5; //Change this to alter animation speed
	var interval = setInterval(function() {
	 step += 1;
	 if (step > numSteps) {
		 clearInterval(interval);
	 } else {
		 var are_we_there_yet = google.maps.geometry.spherical.interpolate(departure,arrival,step/numSteps);
		 line.setPath([departure, are_we_there_yet]);
	 }
	}, timePerStep);
}

function clearMarkers() {
	if (markers.length > 0) {
		// Loop through markers and set map to null for each
		for (var markerId in markers) {
			var marker = markers[markerId];
			marker.setMap(null);
		}
		markers = [];
	}
}

function setMarkers(json, map) {
	for (var groupId in json) {
		var group = json[groupId];
		for (var lightId in group) {
			var state = group[lightId]["state"];
			var lat = parseFloat(group[lightId]["lat"]);
			var lng = parseFloat(group[lightId]["long"]);
			if (state == "red") {
				state = 0;
			} else if (state == "green") {
				state = 1;
			}
			var marker = new google.maps.Marker({
				position: new google.maps.LatLng(lat, lng),
				map: map,
				icon: icons[state]
			});
			markers.push(marker);
		}
	}
}

function getData(map) {
	$.ajax({
	  url: "http://192.168.2.195:3000/api/devices",
	}).done(function (json) {
		clearMarkers();
		setMarkers(json, map);
		window.clearTimeout(timer);
		timer = setTimeout(function () {
			getData(map);
		}, 5000);
	});
}

function getPanicData(map, lat, lng) {
	$.ajax({
	  url: "http://192.168.2.195:3000/api/panic?device=123&coords=" + lat + "," + lng,
	}).done(function (json) {
		$('#details').html(json["accidentDetails"]);
		for (var waypoints in json["routeWaypoints"]) {
			for (var i = 0; i < waypoints.length; i++) {
				var waypoint = waypoints[i];
				animate(waypoint.start_location, waypoint.end_location);
				
			}
		}
	});
}

    </script>
  </head>
  <body>
    {{{body}}}

    <script src="/javascripts/falcor/dist/falcor.browser.js"></script>
    <script src="/javascripts/bundle.js"></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDluLpbNcXXI5rbKwHAEfy53ZjJOs0B-HU&sensor=false&callback=initMap" async defer></script>
  </body>
</html>
